一、Git安装配置
    1.下载地址：http://git-scm.com/downloads
    2.配置个人的用户名称和电子邮箱地址：
        $ git config --global user.name "username"
        $ git config --global user.email email@163.com
    //如果使用global，则配置所有项目的git，如果在某个特定的项目使用其他名字或电邮，只要去掉--
global选项重新配置就可以，新的设定保存在当前项目的.git/config文件里。//
    3.查看配置信息
        $ git config --list
----------------------------------------------------------------------------------------------

二、Git工作流程
一般工作流程：
    （1）克隆Git资源作为工作目录
    （2）在克隆资源上添加或修改文件
    （3）如果其他人修改了，你可以更新资源
    （4）在提交前查看修改
    （5）在修改完成后，如果发现错误，可以撤回提交再次修改并提交
----------------------------------------------------------------------------------------------

三、Git工作区、缓存区、版本库
（1）工作区
    就是在电脑里能看到的目录
（2）暂存区
    英文叫stage或index。一般存放在“.git目录下”的index文件中。
（3）版本库（仓库）
    工作区有一个隐藏目录.git，这不算工作区，而是Git的版本库。
    我们把文件王Git版本库里添加的时候，是分两步执行的：
    第一步：用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
    第二步：用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
    因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在git 
commit就是往master分支上提交更改。
    你可以理解为需要提交的文件修改通通放到暂存区，然后一次性提交暂存区的所有修改。
----------------------------------------------------------------------------------------------

四、Git创建仓库
1.git init
    Git使用git init命令来初始化一个git仓库，Git的很多命令都需要在Git的仓库中运行，所以git 
init是使用Git的第一个命令。
    在执行完git init命令后，Git仓库会生成一个.git目录，该目录包含了资源的所有元数据，其他的项目
目录保持不变。
2.使用方法
（1）使用当前目录作为Git仓库，我们只需要使它初始化：
    $ git init
    执行完该命令后，会在当前目录生成一个.git目录。这个目录是Git来跟踪管理版本库的，没事不要手动
修改这个目录里面的文件。
（2）使用指定目录作为Git仓库：
    $ git init newpro
    初始化后会在newpro目录下出现一个.git目录。所有Git需要的数据和资源都存放在这个目录中。
3.git clone
    使用git clone从现有Git仓库中拷贝项目，命令格式如下：
        $ git clone <repo>
    如果我们需要克隆到指定的目录，可以使用一下命令格式：
        $ git clone <repo> <directory>              //repo：Git仓库    directory：本地目录 //
----------------------------------------------------------------------------------------------

五、Git基本操作
1.git init
    用git init在目录中创建新的Git仓库，你可以在任何时候、任何目录中这么做，完全是本地化的。
        $ git init                      //用ls查看当前目录下所有文件//
2.git clone
    使用git clone拷贝一个Git仓库到本地，让自己能够查看该项目或者进行修改
        $ git clone [url]               //[url]为你想要复制的项目//
    例如：
        $ git clone git@github.com:schacon/simplegit.git   
    默认情况下Git会按照你提供的URL所指示的项目的名称创建你的本地项目目录，通常就是该URL最后一
个/之后的项目名称，可以在该命令之后加上你想要的名字。
    例如：
        $ git clone git@github.com:schacon/simplegit.git mulu2
3.基本快照
    Git的工作就是创建和保存你的项目的快照及之后的快照进行对比。本节将对有创建和提交你的项目的
快照的命令做介绍。
（1）git add
    git add命令可将该文件添加到缓存。
    例如：
        $ git add hellp.py
    或者添加当前目录下所有文件
    例如：
        $ git add .
（2）git status
    查看上次提交之后是否有修改。
    例如：
        $ git status
    上面的代码输出详细的结果，如果加-s参数，输出简短结果
    例如：
        $ git status -s
（3）git diff
    执行git diff来查看执行git status的结果的详细信息。git diff命令显示已写入缓存与已修改但尚未
写入缓存的改动的区别。有以下几个应用，第三条为重点：
    ·尚未缓存的改动：git diff
    ·查看已缓存的改动：git diff --cached
    ·查看已缓存与未缓存的所有改动：git diff HEAD
    ·显示摘要而非整个diff：git diff --stat
    例如：
        $ git diff git.txt
（4）git commit
    执行git commit将缓存区内容添加到仓库中。
    第一步：配置邮箱地址
        $ git config --global user.name 'runoob'
        $ git config --global user.email test@runoob.com
    第二步：写入缓存
        $ git add git.txt
    第三步：提交到仓库
        $ git commit -m "第一次版本提交"         //-m选项可以在命令中提交注释//
    可以通过-a选项直接从工作区提交到仓库，跳过提交缓存的步骤
        $ git commit -am "第二次版本提交"
（5）git reset HEAD
    取消已缓存的内容。执行git reset HEA以取消之前git add添加，但不希望包含在下一次提交快照的
缓存。
    例如：
        $ git reset HEAD git.txt
（6）git rm
    如果只是简单地从工作目录中手工删除文件，运行git status时就会有Changes not staged for 
commit的提示。要从Git中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令
完成子项工作。注意，这是从工作区中删除。
        $ git rm <file>
    如果删除之前修改过并已经存档放到暂存区域，就必须使用强制删除选项-f
        $ git rm -f <file>
    如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，
使用--cached选项即可。
        $ git rm --cached <file>
    可以递归删除，即如果后面跟的是一个目录作为参数，则会递归删除整个目录中的所有子目录和文件。
    进入某个目录中，可以删除该目录下所有文件和子目录：
        $ git rm -r *
（7）git mv
    git mv命令用于移动或重命名一个文件、目录、软连接。下面对一个文件进行重命名：
        $ git mv README README.md
----------------------------------------------------------------------------------------------

六、Git分支管理
1.创建分支、合并分支
    使用分支意味着你可以从开发主线上分离出来，然后在不影响主线的同时继续工作。
    创建分支命令：
        $ git branch <branchname>
    切换分支命令：
        $ git checkout <branchname>
    当你切换分支的时候，Git会用该分支的最后提交的快照替换你的工作目录的内容，所以多个分支不需
要多个目录。
    合并分支命令：
        $ git merge
    你可以多次合并到同一分支，也可以选择在合并之后删除被并入的分支。
（1）git branch
    没有参数是，会列出本地所有分支
        $ git branch
    如果加上名字，就会手动创建分支
        $ git branch testing
    如果上次提交后，又以此方式创建分支，然后再提交，然后切换到这个新建的分支，那么Git将还原你
的工作目录到刚创建分支时的样子。
（2）git checkout
    使用git checkout切换到我们想要修改的分支。
        $ git checkout testing
    使用git checkout -b testing来创建新的分支并切换到该分支下，从而在该分支中操作。在哪个分支
下创建，这个新的分支就包含哪个的工作目录。
（3）git branch -d branchname
    删除分支
        $ git branch -d test2
（3）git merge
    合并分支。将任何分支合并到当前分支中去
        $ git merge
    例如，master分支有1.txt和2.txt，test分支有1.txt，如果在master分支中：
        $ git merge test
    







































